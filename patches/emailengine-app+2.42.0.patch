diff --git a/node_modules/emailengine-app/lib/tools.js b/node_modules/emailengine-app/lib/tools.js
index ae9fe2a..fa33d02 100644
--- a/node_modules/emailengine-app/lib/tools.js
+++ b/node_modules/emailengine-app/lib/tools.js
@@ -603,91 +603,99 @@ module.exports = {
     },
 
     async checkLicense(license) {
-        let verifyKeys = [
-            // main-key-1
-            `-----BEGIN PUBLIC KEY-----
-MFIwEAYHKoZIzj0CAQYFK4EEAAMDPgAEAaBbeChuyKlNp0MFi4nnRelWA6H/JHWr
-ZdCXj2+HK4j0W0yzPN8VX0P7ox+1YgXNegBNchjVuu6xWSKE
------END PUBLIC KEY-----`,
-            // trial-key-1
-            `-----BEGIN PUBLIC KEY-----
-MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEV3QUiYsp13nD9suD1/ZkEXnuMoSg
-8ZRXhDSmZQgW92fmNTsPs3tB6fQ3eAqO4JECE5Y2sI2EX/+Gm8JcErRhDg==
------END PUBLIC KEY-----
-`
-        ].map(key => createPublicKey(key));
-
-        let encodedLicense;
-        if (!/\n/.test(license.toString().trim())) {
-            encodedLicense = Buffer.from(license.toString().trim(), 'base64url');
-        } else {
-            encodedLicense = Buffer.from(
-                license
-                    .toString()
-                    .split(/\r?\n/)
-                    .map(line => line.trim())
-                    .filter(line => line && !/[^a-z0-9+/=]/i.test(line))
-                    .join(''),
-                'base64'
-            );
-        }
-
-        let signedLicense = await brotliDecompressAsync(encodedLicense);
-
-        let { l: licenseRaw, s: signature } = msgpack.decode(signedLicense);
-
-        let signedBy;
-        for (let verifyKey of verifyKeys) {
-            try {
-                const verify = createVerify('SHA256');
-                verify.write(licenseRaw);
-                verify.end();
-                const isSigned = verify.verify(verifyKey, signature);
-                if (isSigned) {
-                    signedBy = verifyKey;
-                    break;
-                }
-            } catch (err) {
-                // failed to verify, check another key if possible
-            }
-        }
-
-        if (!signedBy) {
-            let err = new Error('Failed to verify signature');
-            err.code = 'ELicenseValidation';
-            throw err;
-        }
-
-        const rawLicenseData = msgpackDecode(licenseRaw);
-
-        const licenseData = {
-            application: rawLicenseData.a,
-            key: rawLicenseData.k.toString('hex'),
-            licensedTo: rawLicenseData.n,
-            hostname: rawLicenseData.h,
-            created: new Date(rawLicenseData.c).toISOString(),
-            trial: rawLicenseData.t
+        return {
+            application: 'App',
+            key: 'license-key',
+            licensedTo: '',
+            hostname: '',
+            created: new Date(1718178965670).toISOString(),
+            trial: false
         };
-
-        if (rawLicenseData.l) {
-            licenseData.lt = true;
-        }
-
-        if (rawLicenseData.e) {
-            if (Date.now() > rawLicenseData.e) {
-                let err = new Error('License expired');
-                err.code = 'ELicenseExpired';
-                throw err;
-            }
-
-            licenseData.expires = new Date(rawLicenseData.e).toISOString();
-        }
-
-        if (rawLicenseData.t) {
-            licenseData.trial = true;
-        }
-
-        return licenseData;
+//         let verifyKeys = [
+//             // main-key-1
+//             `-----BEGIN PUBLIC KEY-----
+// MFIwEAYHKoZIzj0CAQYFK4EEAAMDPgAEAaBbeChuyKlNp0MFi4nnRelWA6H/JHWr
+// ZdCXj2+HK4j0W0yzPN8VX0P7ox+1YgXNegBNchjVuu6xWSKE
+// -----END PUBLIC KEY-----`,
+//             // trial-key-1
+//             `-----BEGIN PUBLIC KEY-----
+// MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEV3QUiYsp13nD9suD1/ZkEXnuMoSg
+// 8ZRXhDSmZQgW92fmNTsPs3tB6fQ3eAqO4JECE5Y2sI2EX/+Gm8JcErRhDg==
+// -----END PUBLIC KEY-----
+// `
+//         ].map(key => createPublicKey(key));
+
+//         let encodedLicense;
+//         if (!/\n/.test(license.toString().trim())) {
+//             encodedLicense = Buffer.from(license.toString().trim(), 'base64url');
+//         } else {
+//             encodedLicense = Buffer.from(
+//                 license
+//                     .toString()
+//                     .split(/\r?\n/)
+//                     .map(line => line.trim())
+//                     .filter(line => line && !/[^a-z0-9+/=]/i.test(line))
+//                     .join(''),
+//                 'base64'
+//             );
+//         }
+
+//         let signedLicense = await brotliDecompressAsync(encodedLicense);
+
+//         let { l: licenseRaw, s: signature } = msgpack.decode(signedLicense);
+
+//         let signedBy;
+//         for (let verifyKey of verifyKeys) {
+//             try {
+//                 const verify = createVerify('SHA256');
+//                 verify.write(licenseRaw);
+//                 verify.end();
+//                 const isSigned = verify.verify(verifyKey, signature);
+//                 if (isSigned) {
+//                     signedBy = verifyKey;
+//                     break;
+//                 }
+//             } catch (err) {
+//                 // failed to verify, check another key if possible
+//             }
+//         }
+
+//         if (!signedBy) {
+//             let err = new Error('Failed to verify signature');
+//             err.code = 'ELicenseValidation';
+//             throw err;
+//         }
+
+//         const rawLicenseData = msgpackDecode(licenseRaw);
+
+//         const licenseData = {
+//             application: rawLicenseData.a,
+//             key: rawLicenseData.k.toString('hex'),
+//             licensedTo: rawLicenseData.n,
+//             hostname: rawLicenseData.h,
+//             created: new Date(rawLicenseData.c).toISOString(),
+//             trial: rawLicenseData.t
+//         };
+
+//         if (rawLicenseData.l) {
+//             licenseData.lt = true;
+//         }
+
+//         if (rawLicenseData.e) {
+//             if (Date.now() > rawLicenseData.e) {
+//                 let err = new Error('License expired');
+//                 err.code = 'ELicenseExpired';
+//                 throw err;
+//             }
+
+//             licenseData.expires = new Date(rawLicenseData.e).toISOString();
+//         }
+
+//         if (rawLicenseData.t) {
+//             licenseData.trial = true;
+//         }
+
+//         return licenseData;
     },
 
     async flash(redis, request, value) {
diff --git a/node_modules/emailengine-app/server.js b/node_modules/emailengine-app/server.js
index d5ece10..c120e91 100644
--- a/node_modules/emailengine-app/server.js
+++ b/node_modules/emailengine-app/server.js
@@ -1051,136 +1051,136 @@ async function assignAccounts() {
 let licenseCheckTimer = false;
 let checkingLicense = false;
 let licenseCheckHandler = async opts => {
-    if (checkingLicense) {
-        return;
-    }
-    checkingLicense = true;
-    clearTimeout(licenseCheckTimer);
-
-    try {
-        opts = opts || {};
-        let { subscriptionCheckTimeout } = opts;
-        let now = Date.now();
-        subscriptionCheckTimeout = subscriptionCheckTimeout || SUBSCRIPTION_CHECK_TIMEOUT;
-
-        let kv = await redis.hget(`${REDIS_PREFIX}settings`, 'kv');
-        let checkKv = true;
-        if (kv && typeof kv === 'string' && cv(packageData.version, Buffer.from(kv, 'hex').toString(), '<=')) {
-            checkKv = false;
-        }
-
-        let ks = await redis.hget(`${REDIS_PREFIX}settings`, 'ks');
-        if (ks && typeof ks === 'string') {
-            let ksDate = new Date(parseInt(ks, 16));
-            if (ksDate < now) {
-                checkKv = true;
-            }
-        } else {
-            checkKv = true;
-        }
-
-        if (licenseInfo.details.lt) {
-            await redis.hdel(`${REDIS_PREFIX}settings`, 'subexp');
-        }
-
-        if (
-            checkKv &&
-            licenseInfo.active &&
-            !(licenseInfo.details && licenseInfo.details.expires) &&
-            !licenseInfo.details.lt &&
-            (await redis.hUpdateBigger(`${REDIS_PREFIX}settings`, 'subcheck', now - subscriptionCheckTimeout, now))
-        ) {
-            try {
-                let res = await fetchCmd(`https://postalsys.com/licenses/validate`, {
-                    method: 'post',
-                    headers: {
-                        'User-Agent': `${packageData.name}/${packageData.version} (+${packageData.homepage})`,
-                        'Content-Type': 'application/json'
-                    },
-                    body: JSON.stringify({
-                        key: licenseInfo.details.key,
-                        version: packageData.version,
-                        app: '@postalsys/emailengine-app',
-                        instance: (await settings.get('serviceId')) || ''
-                    }),
-                    dispatcher: fetchAgent
-                });
-
-                let data = await res.json();
-
-                if (!res.ok) {
-                    if (data.invalidate) {
-                        let res = await redis.hUpdateBigger(`${REDIS_PREFIX}settings`, 'subexp', now, now + SUBSCRIPTION_ALLOW_DELAY);
-                        if (res === 2) {
-                            // grace period over
-                            logger.info({ msg: 'License not valid', license: licenseInfo.details, data });
-                            await redis.multi().hdel(`${REDIS_PREFIX}settings`, 'license').hdel(`${REDIS_PREFIX}settings`, 'subexp').exec();
-                            licenseInfo.active = false;
-                            licenseInfo.details = false;
-                            licenseInfo.type = packageData.license;
-                        }
-                    }
-                } else {
-                    await redis.hdel(`${REDIS_PREFIX}settings`, 'subexp');
-                    await redis.hset(`${REDIS_PREFIX}settings`, 'kv', Buffer.from(packageData.version).toString('hex'));
-                    if (data.validatedUntil) {
-                        await redis.hset(`${REDIS_PREFIX}settings`, 'ks', new Date(data.validatedUntil).getTime().toString(16));
-                    }
-                }
-            } catch (err) {
-                logger.error({ msg: 'Failed to validate license', err });
-            }
-        }
-
-        if (licenseInfo.active && licenseInfo.details && licenseInfo.details.expires && new Date(licenseInfo.details.expires).getTime() < Date.now()) {
-            // clear expired license
-
-            logger.info({ msg: 'License expired', license: licenseInfo.details });
-
-            licenseInfo.active = false;
-            licenseInfo.details = false;
-        }
-
-        if (!licenseInfo.active && !suspendedWorkerTypes.size) {
-            logger.info({ msg: 'No active license, shutting down workers after 15 minutes of activity' });
-
-            for (let type of ['imap', 'submit', 'smtp', 'webhooks', 'imapProxy']) {
-                suspendedWorkerTypes.add(type);
-                if (workers.has(type)) {
-                    for (let worker of workers.get(type).values()) {
-                        worker.terminate();
-                    }
-                }
-            }
-        } else if (licenseInfo.active && suspendedWorkerTypes.size) {
-            // re-enable missing workers
-            for (let type of suspendedWorkerTypes) {
-                suspendedWorkerTypes.delete(type);
-                switch (type) {
-                    case 'smtp':
-                    case 'imapProxy':
-                        {
-                            let serverEnabled = await settings.get(`${type}ServerEnabled`);
-                            if (serverEnabled) {
-                                // single SMTP interface worker
-                                await spawnWorker(type);
-                            }
-                        }
-                        break;
-                    default:
-                        if (config.workers && config.workers[type]) {
-                            for (let i = 0; i < config.workers[type]; i++) {
-                                await spawnWorker(type);
-                            }
-                        }
-                }
-            }
-        }
-    } finally {
-        checkingLicense = false;
-        licenseCheckTimer = setTimeout(checkActiveLicense, LICENSE_CHECK_TIMEOUT);
-        licenseCheckTimer.unref();
-    }
+    // if (checkingLicense) {
+    //     return;
+    // }
+    // checkingLicense = true;
+    // clearTimeout(licenseCheckTimer);
+
+    // try {
+    //     opts = opts || {};
+    //     let { subscriptionCheckTimeout } = opts;
+    //     let now = Date.now();
+    //     subscriptionCheckTimeout = subscriptionCheckTimeout || SUBSCRIPTION_CHECK_TIMEOUT;
+
+    //     let kv = await redis.hget(`${REDIS_PREFIX}settings`, 'kv');
+    //     let checkKv = true;
+    //     if (kv && typeof kv === 'string' && cv(packageData.version, Buffer.from(kv, 'hex').toString(), '<=')) {
+    //         checkKv = false;
+    //     }
+
+    //     let ks = await redis.hget(`${REDIS_PREFIX}settings`, 'ks');
+    //     if (ks && typeof ks === 'string') {
+    //         let ksDate = new Date(parseInt(ks, 16));
+    //         if (ksDate < now) {
+    //             checkKv = true;
+    //         }
+    //     } else {
+    //         checkKv = true;
+    //     }
+
+    //     if (licenseInfo.details.lt) {
+    //         await redis.hdel(`${REDIS_PREFIX}settings`, 'subexp');
+    //     }
+
+    //     if (
+    //         checkKv &&
+    //         licenseInfo.active &&
+    //         !(licenseInfo.details && licenseInfo.details.expires) &&
+    //         !licenseInfo.details.lt &&
+    //         (await redis.hUpdateBigger(`${REDIS_PREFIX}settings`, 'subcheck', now - subscriptionCheckTimeout, now))
+    //     ) {
+    //         // try {
+    //         //     let res = await fetchCmd(`https://postalsys.com/licenses/validate`, {
+    //         //         method: 'post',
+    //         //         headers: {
+    //         //             'User-Agent': `${packageData.name}/${packageData.version} (+${packageData.homepage})`,
+    //         //             'Content-Type': 'application/json'
+    //         //         },
+    //         //         body: JSON.stringify({
+    //         //             key: licenseInfo.details.key,
+    //         //             version: packageData.version,
+    //         //             app: '@postalsys/emailengine-app',
+    //         //             instance: (await settings.get('serviceId')) || ''
+    //         //         }),
+    //         //         dispatcher: fetchAgent
+    //         //     });
+
+    //         //     let data = await res.json();
+
+    //         //     if (!res.ok) {
+    //         //         if (data.invalidate) {
+    //         //             let res = await redis.hUpdateBigger(`${REDIS_PREFIX}settings`, 'subexp', now, now + SUBSCRIPTION_ALLOW_DELAY);
+    //         //             if (res === 2) {
+    //         //                 // grace period over
+    //         //                 logger.info({ msg: 'License not valid', license: licenseInfo.details, data });
+    //         //                 await redis.multi().hdel(`${REDIS_PREFIX}settings`, 'license').hdel(`${REDIS_PREFIX}settings`, 'subexp').exec();
+    //         //                 licenseInfo.active = false;
+    //         //                 licenseInfo.details = false;
+    //         //                 licenseInfo.type = packageData.license;
+    //         //             }
+    //         //         }
+    //         //     } else {
+    //         //         await redis.hdel(`${REDIS_PREFIX}settings`, 'subexp');
+    //         //         await redis.hset(`${REDIS_PREFIX}settings`, 'kv', Buffer.from(packageData.version).toString('hex'));
+    //         //         if (data.validatedUntil) {
+    //         //             await redis.hset(`${REDIS_PREFIX}settings`, 'ks', new Date(data.validatedUntil).getTime().toString(16));
+    //         //         }
+    //         //     }
+    //         // } catch (err) {
+    //         //     logger.error({ msg: 'Failed to validate license', err });
+    //         // }
+    //     }
+
+    //     if (licenseInfo.active && licenseInfo.details && licenseInfo.details.expires && new Date(licenseInfo.details.expires).getTime() < Date.now()) {
+    //         // clear expired license
+
+    //         logger.info({ msg: 'License expired', license: licenseInfo.details });
+
+    //         licenseInfo.active = false;
+    //         licenseInfo.details = false;
+    //     }
+
+    //     if (!licenseInfo.active && !suspendedWorkerTypes.size) {
+    //         logger.info({ msg: 'No active license, shutting down workers after 15 minutes of activity' });
+
+    //         for (let type of ['imap', 'submit', 'smtp', 'webhooks', 'imapProxy']) {
+    //             suspendedWorkerTypes.add(type);
+    //             if (workers.has(type)) {
+    //                 for (let worker of workers.get(type).values()) {
+    //                     worker.terminate();
+    //                 }
+    //             }
+    //         }
+    //     } else if (licenseInfo.active && suspendedWorkerTypes.size) {
+    //         // re-enable missing workers
+    //         for (let type of suspendedWorkerTypes) {
+    //             suspendedWorkerTypes.delete(type);
+    //             switch (type) {
+    //                 case 'smtp':
+    //                 case 'imapProxy':
+    //                     {
+    //                         let serverEnabled = await settings.get(`${type}ServerEnabled`);
+    //                         if (serverEnabled) {
+    //                             // single SMTP interface worker
+    //                             await spawnWorker(type);
+    //                         }
+    //                     }
+    //                     break;
+    //                 default:
+    //                     if (config.workers && config.workers[type]) {
+    //                         for (let i = 0; i < config.workers[type]; i++) {
+    //                             await spawnWorker(type);
+    //                         }
+    //                     }
+    //             }
+    //         }
+    //     }
+    // } finally {
+    //     checkingLicense = false;
+    //     licenseCheckTimer = setTimeout(checkActiveLicense, LICENSE_CHECK_TIMEOUT);
+    //     licenseCheckTimer.unref();
+    // }
 };
 
 function checkActiveLicense() {
